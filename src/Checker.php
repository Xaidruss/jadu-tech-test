<?php declare(strict_types=1);namespace App;/** * Pangrams, anagrams and palindromes *  * Implement each of the functions of the Checker class.  * Aim to spend about 10 minutes on each function.  */class Checker{    public const LETTERS = [        'a', 'b', 'c', 'd', 'e', 'f',        'g', 'h', 'i', 'j', 'k', 'l',        'm', 'n', 'o', 'p', 'q', 'r',        's', 't', 'u', 'v', 'w', 'x',        'y', 'z'    ];    /**     * A palindrome is a word, phrase, number, or other sequence of characters      * which reads the same backward or forward.     *     * @param string $word     * @return bool     */    public static function isPalindrome(string $word) : bool    {        $len = strlen($word);        $maxlen = ceil($len / 2);        for ($i = 0; $i < $maxlen; $i++) {            if ($word[$i] !== $word[($len - 1) - $i]) {                return false;            }        }        return true;    }        /**     * An anagram is the result of rearranging the letters of a word or phrase      * to produce a new word or phrase, using all the original letters      * exactly once.     *      * @param string $word     * @param string $comparison     * @return bool     */    public static function isAnagram(string $word, string $comparison) : bool    {        /**         * Performant sanity check, a phrase cannot be an anagram if it is the same         */        if ($word === $comparison) {            return false;        }        return count_chars($word) === count_chars($comparison);    }    /**     * A Pangram for a given alphabet is a sentence using every letter of the      * alphabet at least once.      *      * @param string $phrase     * @return bool     */        public static function isPangram(string $phrase) : bool    {        $phase = strtolower($phrase);        return count(array_filter(array_map(function ($letter) use ($phrase) {            return stripos($phrase, $letter) === false ? null : true;        }, self::LETTERS))) === 26;    }}